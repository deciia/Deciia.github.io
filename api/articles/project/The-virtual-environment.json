{"title":"世界也可以这样来创建","slug":"project/The-virtual-environment","date":"2014-05-15T09:11:17.000Z","updated":"2017-05-12T06:23:24.639Z","comments":true,"path":"api/articles/project/The-virtual-environment.json","photos":[],"link":"","excerpt":"虚境标准：这是一个可以快速建立扩增空间的虚拟世界，原型只是一个开始，创造的才是无限的可能。<br>这是一个连通、开放的虚拟世界，用户以角色的身份登入，可以在相近的世界观不同的虚拟世界之间实现跨跃。<br>这是一个支持角色（用户）创建内容生态，并可以向虚拟世界外部分享的虚拟世界。并以内容作为素材进行虚拟世界的扩增开发。<br>每个虚拟世界都是是一个独立的开发平台，可以进行内部应用、玩法的开发，也支持外部应用对虚拟世界的内容进行更新，还有一种应用是架设多个虚拟虚拟世界的桥梁，使他们连成一体。","covers":["/images/game/functional-planning/0.png","/images/game/functional-planning/1.png"],"content":"<p>虚境标准：</p>\n<p>这是一个可以快速建立扩增空间的虚拟世界，原型只是一个开始，创造的才是无限的可能。<br>这是一个连通、开放的虚拟世界，用户以角色的身份登入，可以在相近的世界观不同的虚拟世界之间实现跨跃。<br>这是一个支持角色（用户）创建内容生态，并可以向虚拟世界外部分享的虚拟世界。并以内容作为素材进行虚拟世界的扩增开发。<br>每个虚拟世界都是是一个独立的开发平台，可以进行内部应用、玩法的开发，也支持外部应用对虚拟世界的内容进行更新，还有一种应用是架设多个虚拟虚拟世界的桥梁，使他们连成一体。</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/game/functional-planning/0.png\" alt=\"角色登录\"></p>\n<p>在这里，角色就是虚拟世界的用户，加密的方式打包存储在本地，自动加载到界面上。<br>用户的权限，在这里称为角色的天职，一共有创世者、创生者、赋予者、创造者、编织者、破坏者、指导者（导师）、冒险者、大地人、观察者等十种天职，五种神五种普通的角色。</p>\n<!--more-->\n<p><img src=\"/images/game/functional-planning/1.png\" alt=\"世界观选择\"><br><img src=\"/images/game/functional-planning/2.png\" alt=\"创建众神\"><br><img src=\"/images/game/functional-planning/4.png\" alt=\"编织世界\"><br><img src=\"/images/game/functional-planning/5.png\" alt=\"突破规则\"><br><img src=\"/images/game/functional-planning/6.png\" alt=\"应用开发\"><br><img src=\"/images/game/functional-planning/7.png\" alt=\"平衡世界\"></p>\n<p>来自不乖的建议：</p>\n<p>[如果角色=本地角色压缩包+密钥，不采取用户登录的方式的话]我们要做云应用商城，copy角色可以的，世界观是出售的。</p>\n<p>客户端就用object c和java分别做IOS和android版，服务端就用GO lang 实现一个身份中心和应用商场 ，提供RESTful 和socket api ，上线后再购买UA证书，角色中心数据库兼容绑定第三方帐号接入</p>\n<p>最终成品是 用户购买一块移动存储硬盘和一个定制的wifi芯片器，可以直接链接电脑进行调试“世界观”，玩家可以直接链接电视进入应用 ，控制器嘛就是智能手机、手表、眼镜等等，最终销售的是一个硬件模块，大概只有一个U盘那么大。wifi芯片 只用于通讯加密和数据多点共享，数据是放在用户自己的移动硬盘或者局域网的私有云上。</p>\n<p>首先要建立底层的rules，没有最底层的rules，每个世界观 无法进行角色生成。创建世界观，我称为create page，创建角色，我称为 bind roles，建议了解一下WebGL <a href=\"http://www.hiwebgl.com/相关的信息。\" target=\"_blank\" rel=\"external\">http://www.hiwebgl.com/相关的信息。</a></p>\n<p>来自Rox、杰杰猫、雷欧纳德的提醒和建议：</p>\n<p>我觉得要这样做的话必须保证上手足够简单，并且要严格抑制复杂度，不然无法吸引足够多玩家，minecraft就是用乐高堆堆堆，简单明了，搞得太复杂的话会吓退用户。OSU成功的关键是上手门槛超低，而且用户有足够的动力来创建内容，动力就是对喜欢歌曲的爱，也就是玩家参与到游戏制作或内容制作的的源动力。如果这个动力本来就存在于外界，你的东西就好推广。</p>\n<p>规则应该是开发者的事，玩家要参与创建规则的话，这游戏就偏离了游戏本质而变成一个游戏化的开发平台了。玩家创建规则的权限越高，门槛就越高，娱乐性就越弱，吸引的人就越少。那这个的定位是游戏还是一个框架平台？我觉得必须明确偏向其中一边。</p>\n<p>开发人员干嘛不自己开发个app，而要去你的地方开发游戏呢。说白了就是开发的过程等于在玩游戏才行。你可以仔细研究一下零世界当时的想法，后来做出来的东西，以及这个项目最后是怎么死掉的。</p>\n","categories":[{"name":"游戏","slug":"游戏","count":11,"path":"api/categories/游戏.json"}],"tags":[{"name":"游戏设计","slug":"游戏设计","count":3,"path":"api/tags/游戏设计.json"}]}