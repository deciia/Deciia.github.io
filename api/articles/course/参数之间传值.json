{"title":"参数之间传值","slug":"course/参数之间传值","date":"2016-04-11T12:14:04.000Z","updated":"2017-04-22T13:44:55.591Z","comments":true,"path":"api/articles/course/参数之间传值.json","photos":[],"link":"","excerpt":"最近用到一种功能，需要用到数组大量定义一系列数据，又不想重复定义，因此想调用上一个定义的参数里面的数据，发现GMS的参数之间是并发运行的，互相之间无法通信。下面讨论这个问题，怎么给函数传递多个参数，并且让参数之间可以通信。","covers":null,"content":"<p>最近用到一种功能，需要用到数组大量定义一系列数据，又不想重复定义，因此想调用上一个定义的参数里面的数据，发现GMS的参数之间是并发运行的，互相之间无法通信。下面讨论这个问题，怎么给函数传递多个参数，并且让参数之间可以通信。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">///main(arg0,arg1,arg2,arg3)</div><div class=\"line\">//比如脚本1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//----------------------------------------------------</div><div class=\"line\"></div><div class=\"line\">///test1()</div><div class=\"line\">// 脚本2</div><div class=\"line\"></div><div class=\"line\">a = 100;</div><div class=\"line\">return a;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">///test2()</div><div class=\"line\">// 脚本3</div><div class=\"line\"></div><div class=\"line\">a += 1;</div><div class=\"line\">return a;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">///test3()</div><div class=\"line\">// 脚本4</div><div class=\"line\"></div><div class=\"line\">return a;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// test的运行的结果作为aa的参数</div><div class=\"line\">aa(test(),test(),test());</div><div class=\"line\">// 但是作为参数来说，他们是并发运行的，也就是说假如你在第一个参数的test中初始化一个变量，</div><div class=\"line\">// 在第二个参数的test中使用，这会有逻辑上的错误，也就是报错</div></pre></td></tr></table></figure>\n<p>那么怎么解决这个问题呢。这里采用取巧的办法，我们知道表达式执行是从左到右，因此可以将参数的含义转化为表达式中的一项。</p>\n<p>比如 main(test1(a,b,c)+test2(a,b,c)+test3(a,b,c)),但直接相加的结果返回给main函数和参数的意义相背，函数需要分别获取三个参数的值。由于我一开始就是使用数组定义数据，很自然的想到了，test1~test4的返回值存储到一个数组中返回给main。</p>\n<p>于是我设计了三个脚本，第一个脚本初始化一个数组并添加第一个参数，第二个脚本往数组里添加更多参数，第三个脚本返回数组给main函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/// arg0(argument0)</div><div class=\"line\">// 初始化数组</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"></div><div class=\"line\">//代替 array(1,22),在参数之间传递数据</div><div class=\"line\">a = argr(arg0(1)|arga(22)|arga(25));</div><div class=\"line\">show_debug_message(a); //&#123; &#123; 1,22,25 &#125;,  &#125;</div><div class=\"line\"></div><div class=\"line\">YYC模式下使用arg0()会报错</div><div class=\"line\">a = argr(arg0(1)|arga(arg0()-1)|arga(25));</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">//if (argument_count ==0 ) return array_args[0];</div><div class=\"line\"></div><div class=\"line\">var a = noone;</div><div class=\"line\">if (argument_count)</div><div class=\"line\">if (argument_count == 1) a = argument[0]</div><div class=\"line\">else for (var i=0;i&lt;argument_count;i++)&#123;</div><div class=\"line\">    a[i] =argument[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">array_args = noone;</div><div class=\"line\">array_args[0] = a;</div><div class=\"line\">array_args_count = 0;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/// arga(argument...)</div><div class=\"line\">// 添加参数到数组中</div><div class=\"line\"></div><div class=\"line\">var a = noone;</div><div class=\"line\">if (argument_count)</div><div class=\"line\">if (argument_count == 1) a = argument[0]</div><div class=\"line\">else for (var i=0;i&lt;argument_count;i++)&#123;</div><div class=\"line\">    a[i] =argument[i];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">array_args[++array_args_count] = a;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">///argr();</div><div class=\"line\">// 返回数组给主函数</div><div class=\"line\"></div><div class=\"line\">return array_args;</div></pre></td></tr></table></figure>\n<p>注意，GMS开启短路求值时 <code>a = argr(arg0(1)||arga(22)||arga(25));</code>将不可用，因此这里使用”|”。</p>\n<p>使用这三个脚本，可以实现一开始提到的效果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">aa(argr(arg0(test1()) |  // 在这里初始化 a = 100;</div><div class=\"line\">arga(test2()) |          // 在这里a加1</div><div class=\"line\">arga(test3())            // 直接返回a</div><div class=\"line\">)))</div></pre></td></tr></table></figure>\n<p>最后argr会将三个test脚本脚本的返回值保存为数组返回给aa。</p>\n","categories":[{"name":"教程","slug":"教程","count":7,"path":"api/categories/教程.json"}],"tags":[{"name":"GMS教程","slug":"GMS教程","count":3,"path":"api/tags/GMS教程.json"}]}