{"title":"GMS shader参考","date":"2014-12-07T05:01:12.000Z","updated":"2014-12-07T08:17:20.204Z","comments":true,"path":"api/pages/projects/gms/shader/index.json","covers":null,"excerpt":null,"content":"<p>这一节解释了GMS创建着色器的一些函数和常量。</p>\n<p>着色器英文名叫“shader”。着色器在通过显卡处理内容并渲染到屏幕的过程是极其强大的。即然这些程序实际上是在显卡自身上运行，就意味着运行速度是非常快的，可以从CPU循环中释放出变量。</p>\n<p>着色器需要使用着色器的编辑器同时创建两个，一个顶点着色器，一个片段着色器（通常也叫像素着色器），即使（比如）你仅需为一个正在绘制的实例改变顶点位置，或者你仅仅想像素的颜色值，作为一个完整的着色器，你仍需要两个着色器才可以运行。</p>\n<blockquote>\n<p>注意：着色器不允许改变任何变量的值？</p>\n</blockquote>\n<p>更多着色器语言的内容请看<a href=\"http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf\" title=\"OpenGL ES Shading Language (GLSL ES) Reference Pages\" target=\"_blank\" rel=\"external\">OpenGL ES 着色器语言(GLSL ES) 文档</a></p>\n<p>或者网盘中的文档 <a href=\"http://pan.baidu.com/s/1hqKh2nU\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1hqKh2nU</a></p>\n<p>##使用着色器</p>\n<p>创建着色器后，使用起来是非常简单的，只需要几行的代码就可以实现基本的功能。</p>\n<pre><code>shader_set(myShader);\ndraw_self();\nshader_reset();\n</code></pre><p>正如所见，它们以类似的方式用于混合模型和表面，首先选择设置着色器，在着色器里绘制内容，然后重置着色器返回原来的绘制模式。如果想通过着色器对整个屏幕进行渲染，而不仅仅是一个精灵或背景，可以设置表面捕捉当前的视野，然后让表面在着色器里绘制（表面相关的文档有更多详细的内容）。</p>\n<p>以下函数用于着色器的绘制。</p>\n<h3 id=\"shader-set\"><a href=\"#shader-set\" class=\"headerlink\" title=\"shader_set\"></a>shader_set</h3><pre><code>shader_set(shader);\n//shader：着色器的索引。\n\nshader_set(shader_Glass);\ndraw_self();\nshader_reset();\n//设置着色器shader_Glass，然后在着色器里绘制当前的精灵。\n</code></pre><p>设置着色器,以便之后用于绘制。使用<code>shader_reset();</code>结速着色器的绘制。</p>\n<blockquote>\n<p>注意：只能在一个实例的绘制事件中调用着色器。</p>\n</blockquote>\n<h3 id=\"shader-get-uniform\"><a href=\"#shader-get-uniform\" class=\"headerlink\" title=\"shader_get_uniform\"></a>shader_get_uniform</h3><pre><code>shader_get_uniform(shader, uniform);\n//shader:着色器的索引 uniform:着色器常量，用于获取一个字符的句柄，在着色器代码中可以找到。\n\nshader_params = shader_get_uniform(shader_glass, &quot;u_vRefractColour&quot;); \n//上述代码将用一个变量获得着色器常量“u_vRefractColour”的句柄。\n</code></pre><p>既然不能在着器里改变常量，就不得不在调用着色器之前用有效的uniform设置函数进行设置。也就是说要在实例的绘制函数中使用，就必须先用一个变量从着色器中获得句柄，然后对这个变量进行设置值传递到着色器里。</p>\n<blockquote>\n<p>尽管着色器是由顶点和片段着色器两个不显眼的程序构成，但它们之间没有区别，两个都可以返回着色器常量的句柄。</p>\n</blockquote>\n<h3 id=\"shader-get-sampler-index\"><a href=\"#shader-get-sampler-index\" class=\"headerlink\" title=\"shader_get_sampler_index\"></a>shader_get_sampler_index</h3><pre><code>shader_get_sampler_index(shader, uniform);\n//shader:着色器的索引 uniform:获得取样器的句柄\n\nshader_sample = shader_get_sampler_index(shader_glass, &quot;s_NoiseSampler&quot;); \n//上述代码将获得取样器“s_NoiseSampler”的句柄 \n</code></pre><p>说明同上。</p>\n<h3 id=\"shader-set-uniform-f\"><a href=\"#shader-set-uniform-f\" class=\"headerlink\" title=\"shader_set_uniform_f\"></a>shader_set_uniform_f</h3><pre><code>shader_set_uniform_f(handle, value1 [, value2, value3, value4]);\n//handle:句柄，比如上面中的“shader_sample” value1…value4：设置给着色器常量的浮点值\n\nshader_params = shader_get_uniform(shader_glass, &quot;u_vParams&quot;);\nshader_set_uniform_f(shader_params, 0.1, 0.8, 0.25);\n//上述代码将获得着色器常量“u_vParams”的句柄，然后设置这个常量为指定的值。\n</code></pre><p>使用这个函数设置着色器常量的值。必须提交使用“shader_get_uniform”获得句柄，而且必须了解这个常量的类别，以便传递正确的浮点数值，比如一个“vec2”需要向函数传递两个浮点数。</p>\n<p>上述规则有一个例外，当处理32位颜色的值，可以向着色器传递8个32位的颜色值，它们会自动的转化为0-1之间的vec4浮点数。但是你必须使用名为in_colour的着色器常，一个颜色或者多个颜色in_Colour0、in_Colour1等等。</p>\n<pre><code>//Single colour\nattribute vec2 in_Position;\nattribute vec4 in_Colour;\nattribute vec2 in_TextureCoord;\n\n//Multiple colours\nattribute vec2 in_Position;\nattribute vec4 in_Colour0;\nattribute vec4 in_Colour1;\nattribute vec2 in_TextureCoord;\n</code></pre><p>还要注意的是，如果你想要做的压缩法线等..使用一个4字节的色彩格式，那么你也必须使用同上的“in_Colour”格式。</p>\n<h3 id=\"shader-set-uniform-f-array\"><a href=\"#shader-set-uniform-f-array\" class=\"headerlink\" title=\"shader_set_uniform_f_array\"></a>shader_set_uniform_f_array</h3><pre><code>shader_set_uniform_f_array(handle, array);\n//hadle:需要设置的着色器常量的句柄\n//array:已经提前初始化的浮点值数组\n\ntex_array[0] = 0.5;\ntex_array[1] = 0.1;\ntex_array[2] = 0.25;\nshader_params = shader_get_uniform(shader_glass, &quot;u_vParams&quot;);\nshader_set_uniform_f_array(shader_params, tex_array);\n//上述代码将获得着色器常量u_vParams的句柄，然后设置数组对应的值\n</code></pre><p>通过这个函数可以将数组传递给着色器常量，必须提前用<a href=\"#shader_get_uniform\">shader_get_uniform</a>获得句柄，同时也需要初化化这个数组。</p>\n"}